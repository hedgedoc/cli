#!/usr/bin/env bash
# Documentation & Code: https://github.com/hackmdio/codimd-cli

set -euo pipefail
IFS=$'\n\t'

err_report() {
    echo "Error on line $1"
}

trap 'err_report $LINENO' ERR

PROGRAM_NAME=codimd-cli

# Use XDG compliant config directories
# As reference see https://www.ctrl.blog/entry/xdg-basedir-scripting
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/$PROGRAM_NAME"

mkdir -p "$CONFIG_DIR"
chmod 700 "$CONFIG_DIR"

codi_cli=$(basename $0)

help_str="
Options:
    $ $codi_cli import /path/to/your/content.md
    qhmNmwmxSmK1H2oJmkKBQQ       # returns note id on success

    $ $codi_cli publish qhmNmwmxSmK1H2oJmkKBQQ
    /s/S1ok9no3f                 # returns published note url

    $ $codi_cli export --pdf qhmNmwmxSmK1H2oJmkKBQQ output.pdf
    $ $codi_cli export --md qhmNmwmxSmK1H2oJmkKBQQ output.md
    $ $codi_cli export --html qhmNmwmxSmK1H2oJmkKBQQ output.html
    $ $codi_cli export --slides qhmNmwmxSmK1H2oJmkKBQQ output.zip

    $ $codi_cli login --email email@example.net p4sW0rD
    $ $codi_cli login --ldap ldap-user p4sW0rD
    $ $codi_cli profile
    You are logged in as email with id x[...]x.
    $ $codi_cli history
    ID                      Name
    0nAp3YRyTlyQ-N3N7lCk-w  Note_1
    qhmNmwmxSmK1H2oJmkKBQQ  Note_2
    $ $codi_cli delete 0nAp3YRyTlyQ-N3N7lCk-w
    $ $codi_cli logout

Example:
    $ env CODIMD_SERVER='https://codimd.example.com' $codi_cli import /path/to/your/content.md
"

CODIMD_SERVER=${CODIMD_SERVER:="http://127.0.0.1:3000"}  # TODO: allow passing a path to codimd config.json to parse this out

function publish_note() {
    curl -b $CODIMD_COOKIES_FILE "$CODIMD_SERVER/$1/publish" 2>/dev/null | perl -pe 's/Found. Redirecting to \/(.+?)$/\/$1\n/gs'
}

function import_note() {
    curl -q -b $CODIMD_COOKIES_FILE -XPOST -H 'Content-Type: text/markdown' --data-binary "@$1" "$CODIMD_SERVER/new" 2>/dev/null | perl -pe 's/Found. Redirecting to \/(.+?)$/$1\n/gs'
}

function export_note() {
    if [[ -z "$3"  ]]; then
        echo "ERROR: You must specify a file path to save the output to."
        echo ""
        echo "Usage: codimd export [--pdf|--md|--html|--slides] <note_id> <output_file>"
        echo "For usage exmaples, see: codimd help"
        exit 1
    fi

    if [[ $1 == "--pdf" ]]; then
        wget --load-cookies $CODIMD_COOKIES_FILE -O "$3" "$CODIMD_SERVER/$2/pdf"
    elif [[ $1 == "--md" ]]; then
        wget --load-cookies $CODIMD_COOKIES_FILE -O "$3" "$CODIMD_SERVER/$2/download"
    elif [[ $1 == "--html" ]]; then
        publish_url=$(publish_note "$2")
        wget --load-cookies $CODIMD_COOKIES_FILE --recursive --convert-links -O "$3" "$CODIMD_SERVER$publish_url"
    elif [[ $1 == "--slides" ]]; then
        wget --load-cookies $CODIMD_COOKIES_FILE --recursive --convert-links -O "$3" "$CODIMD_SERVER/$2/slide"
    else
        echo "Usage: codimd export [--pdf|--md|--html|--slides] <note_id> <output_file>"
    fi
}

CODIMD_COOKIES_FILE=${CODIMD_COOKIES_FILE:="$CONFIG_DIR/key.conf"}

function authenticate_email() {
    if [[ -z $1 ]]; then
        echo "ERROR: You must provide an email and password."
        echo ""
        echo "Usage: codimd login --email <email> <password>"
        echo "For usage examples, see: $codi_cli help"
        exit 1
    fi

    PASSWORD=$2

    if [[ -z $2 ]]; then
        echo "Enter your password"
        read -s PASSWORD
    fi

    curl -c $CODIMD_COOKIES_FILE \
        -XPOST \
        --data-urlencode "email=$1" --data-urlencode "password=$PASSWORD" \
        $CODIMD_SERVER/login &>/dev/null
}

function authenticate_ldap() {
    if [[ -z $1 ]] || [[ -z $2 ]]; then
        echo "ERROR: You must provide an email and password."
        echo ""
        echo "Usage: codimd login --ldap <username> <password>"
        echo "For usage examples, see: $codi_cli help"
        exit 1
    fi

    curl -c $CODIMD_COOKIES_FILE \
        -XPOST \
        --data-urlencode "email=$1" --data-urlencode "password=$2" \
        $CODIMD_SERVER/auth/ldap &>/dev/null
}

function authenticate() {
    if [[ -z $1 ]]; then
        echo "Usage: codimd login [--email|--ldap]"
        echo "For usage examples, see: $codi_cli help"
        exit 0
    fi

    if [[ $1 == "--email" ]]; then
        shift
        authenticate_email "$@"
    elif [[ $1 == "--ldap" ]]; then
        shift
        authenticate_ldap "$@"
    else
        echo "ERROR: You must provide a protocol."
        echo ""
        echo "Usage: codimd login [--email|--ldap] <login> <password>"
        echo "For usage examples, see: $codi_cli help"
        exit 1
    fi

    if [[ $(is_authenticated) == "ok" ]]; then
        echo "Logged in $CODIMD_SERVER as $1 successfully."
    else
        echo "Failed to login at $CODIMD_SERVER."
        exit 1
    fi

}

function is_authenticated() {
    STATUS=$(curl -b $CODIMD_COOKIES_FILE $CODIMD_SERVER/me 2>/dev/null)

    echo $(echo $STATUS | jq -r '.status')
}

function deauthenticate() {
    curl -b $CODIMD_COOKIES_FILE -c $CODIMD_COOKIES_FILE $CODIMD_SERVER/logout &>/dev/null
}

function get_profile() {
    STATUS=$(curl -b $CODIMD_COOKIES_FILE $CODIMD_SERVER/me 2>/dev/null)

    if [[ "$(echo $STATUS | jq -r '.status')" == "forbidden" ]]; then
        echo "Error: Need to authenticate."
        exit 1
    else
        NAME=$(echo $STATUS | jq -r '.name')
        ID=$(echo $STATUS | jq -r '.id')
        echo "You are logged in $CODIMD_SERVER as $NAME with id $ID."
    fi
}

function get_history() {
    if [[ "$(is_authenticated)" ]]; then
        HISTORY=$(curl -b $CODIMD_COOKIES_FILE $CODIMD_SERVER/history 2>/dev/null)
        echo $HISTORY | jq -r '["ID", "", "", "Name"], (.history[] | [.id, .text]) | @tsv'
        # If the tags are needed, they can be found in .tags
        # Same for the date in .time
    else
        echo "Error: Need to authenticate."
        exit 1
    fi
}

function delete_history() {
    if [[ -z "$1" ]]; then
        echo "ERROR: You must specify a note id to delete."
        echo ""
        echo "Usage: codimd delete <note_id>"
        exit 1
    elif [[ "$(is_authenticated)" ]]; then
        curl -b $CODIMD_COOKIES_FILE -X DELETE $CODIMD_SERVER/history/$1
    else
        echo "Error: Need to authenticate."
        exit 1
    fi
}

option=${1:-"undefined"}
case $option in
login)
    shift
    authenticate "$@"
    ;;
profile)
    get_profile
    ;;
logout)
    deauthenticate
    ;;
import)
    import_note "$2"
    ;;
export)
    export_note "$2" "$3" "$4"
    ;;
publish)
    publish_note "$2"
    ;;
history)
    get_history
    ;;
delete)
    delete_history "$2"
    ;;
*)
    echo "$help_str"
    ;;
esac
